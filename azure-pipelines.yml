# Surge synth build script
# https://aka.ms/yaml

trigger:
- master
- release/*

pr:
- master

jobs:
- job: Build
  strategy:
    matrix:
      mac:
        imageName: 'macos-10.13'
        isMac: True
      windows:
        imageName: 'vs2017-win2016'
        isWindows: True
        is64Bit: True
      windows-x86:
        imageName: 'vs2017-win2016'
        isWindows: True
        is32Bit: True
      linux:
        imageName: 'ubuntu-16.04'
        isLinux: True

  pool:
    vmImage: $(imageName)

  steps:
  - checkout: self
    fetchDepth: 1
    # submodules: recursive # can't do submodules here b'cuz depth=1 fails with Github

  - bash: |
     echo "BUILD REASON = " $BUILD_REASON
     echo "MAKE ASSETS = " $MAKEASSETS     
    displayName: Details on build
    
  - bash: |
      # do this here, because we're using a shallow clone and it fails using `submodules: recursive` above
      git submodule update --init --recursive

      export SURGE_VERSION=$(cat VERSION)
      echo "SURGE_VERSION=$SURGE_VERSION"
      echo "##vso[task.setvariable variable=SURGE_VERSION]$SURGE_VERSION"
    displayName: Submodule init

  - bash: |
      pushd $AGENT_TEMPDIRECTORY
      export PREMAKE_MAC=https://github.com/premake/premake-core/releases/download/v5.0.0-alpha13/premake-5.0.0-alpha13-macosx.tar.gz
      curl -L $PREMAKE_MAC --output premake5.tar.gz
      tar zxvf premake5.tar.gz
      popd

      export PATH=$AGENT_TEMPDIRECTORY:$PATH
      ./build-osx.sh --build --verbose
      ls -alFh target
      ls -alFh products
    condition: variables.isMac
    displayName: Build macOS releases

  - task: NuGetToolInstaller@0
    condition: variables.isWindows
    displayName: NuGet

  - bash: |
      pushd $AGENT_TEMPDIRECTORY
      export PREMAKE_WINDOWS=https://github.com/premake/premake-core/releases/download/v5.0.0-alpha13/premake-5.0.0-alpha13-windows.zip
      curl -L $PREMAKE_WINDOWS --output premake5.zip
      unzip premake5.zip
      popd

      export PATH=$AGENT_TEMPDIRECTORY:$PATH
      premake5 vs2017
      ls -alFh

    condition: variables.isWindows
    displayName: Setup Windows Project

  - task: MSBuild@1
    inputs:
      solution: 'buildtask.xml'
      maximumCpuCount: true
      platform: 'x64'
    condition: and(variables.isWindows,variables.is64Bit)
    displayName: Build Windows x64

  - task: MSBuild@1
    inputs:
      solution: 'buildtask.xml'
      maximumCpuCount: true
      platform: 'Win32'
    condition: and(variables.isWindows,variables.is32Bit)
    displayName: Build Windows x86

  - bash: |
      pushd $AGENT_TEMPDIRECTORY
      export PREMAKE_LINUX=https://github.com/premake/premake-core/releases/download/v5.0.0-alpha13/premake-5.0.0-alpha13-linux.tar.gz
      curl -L $PREMAKE_LINUX --output premake5.tar.gz
      tar zxvf premake5.tar.gz
      export PATH=$AGENT_TEMPDIRECTORY:$PATH
      popd

      sudo apt-get install -y xcb
      sudo apt-get install -y libxcb-util-dev
      sudo apt-get install -y libxcb-cursor-dev
      sudo apt-get install -y libxcb-keysyms1-dev
      sudo apt-get install -y libxkbcommon-dev
      sudo apt-get install -y libxkbcommon-x11-dev
      sudo apt-get install -y devscripts

      ./build-linux.sh clean && ./build-linux.sh build

    condition: variables.isLinux
    displayName: Build Linux


- job: NotifyReleases
  dependsOn: Build
  condition: succeeded()

  steps:
  - checkout: none

  - task: DownloadSecureFile@1
    inputs:
      secureFile: notify-releases.sh

  - bash: |
      echo "Notifying releases for branch: $BUILD_SOURCEBRANCH"

      # remove refs/heads/
      export BRANCH="${BUILD_SOURCEBRANCH/refs\/heads\/}"
      if ! [[ $BRANCH =~ ^(master|release/.+)$ ]]; then
        exit
      fi

      . $AGENT_TEMPDIRECTORY/notify-releases.sh $BRANCH
    displayName: Notify Releases
